# Update remote registry whenever there are any changes
name: Update Registry

on:
  schedule:
    # daily at 6 AM UTC to keep registry fresh
    - cron: "0 6 * * *"
  push:
    branches: [main]
    paths:
      - "plugins/**"
      - "core/registry/**"
  workflow_dispatch:
    inputs:
      force_refresh:
        description: "Force complete registry refresh"
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: "3.11"

jobs:
  update-registry:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ./core/pluginz
          pip install -e ./core/registry

      - name: Health check registry
        env:
          REGISTRY_URL: ${{ secrets.REGISTRY_URL || 'https://registry.ezpz.dev' }}
        run: |
          python -c "
          import requests
          import sys

          try:
              response = requests.get('$REGISTRY_URL/health', timeout=10)
              if response.status_code == 200:
                  print('‚úÖ Registry is healthy')
              else:
                  print(f'‚ùå Registry health check failed: {response.status_code}')
                  sys.exit(1)
          except Exception as e:
              print(f'‚ùå Registry health check failed: {e}')
              sys.exit(1)
          "

      - name: Discover all plugins
        id: discover
        run: |
          echo "Discovering plugins in the repository..."
          python -c "
          import json
          import os
          from pathlib import Path
          from ezpz_pluginz.registry import discover_local_plugins

          plugin_dirs = []
          plugins_path = Path('plugins')

          if plugins_path.exists():
              for plugin_dir in plugins_path.iterdir():
                  if plugin_dir.is_dir() and not plugin_dir.name.startswith('.'):
                      plugin_dirs.append(str(plugin_dir))

          print(f'Found plugin directories: {plugin_dirs}')

          # Discover plugins
          plugins = discover_local_plugins(plugin_dirs)
          print(f'Discovered {len(plugins)} plugins')

          # Save to file for next step
          with open('discovered_plugins.json', 'w') as f:
              json.dump(plugins, f, indent=2)

          # Set output
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f'plugin_count={len(plugins)}\n')
          "

      - name: Validate plugin configurations
        run: |
          echo "Validating plugin configurations..."
          python -c "
          import json
          import sys
          from pathlib import Path

          with open('discovered_plugins.json', 'r') as f:
              plugins = json.load(f)

          errors = []
          for plugin in plugins:
              plugin_path = Path(plugin['path'])
              
              # Check required files
              if not (plugin_path / 'ezpz.toml').exists():
                  errors.append(f'{plugin_path}: Missing ezpz.toml')
              
              if not (plugin_path / 'pyproject.toml').exists() and not (plugin_path / 'Cargo.toml').exists():
                  errors.append(f'{plugin_path}: Missing pyproject.toml or Cargo.toml')
              
              # Check for register_plugin function
              if 'register_plugin' not in plugin:
                  print(f'‚ö†Ô∏è {plugin_path}: No register_plugin function found')

          if errors:
              print('‚ùå Plugin validation errors:')
              for error in errors:
                  print(f'  - {error}')
              sys.exit(1)
          else:
              print('‚úÖ All plugins validated successfully')
          "

      - name: Update registry with discovered plugins
        env:
          REGISTRY_API_KEY: ${{ secrets.REGISTRY_API_KEY }}
          FORCE_REFRESH: ${{ github.event.inputs.force_refresh }}
        run: |
          echo "Updating registry with discovered plugins..."

          if [ "$FORCE_REFRESH" = "true" ]; then
              echo "Performing force refresh of registry..."
              ezplugins admin refresh-registry --force
          else
              echo "Performing incremental registry update..."
              ezplugins admin refresh-registry
          fi

      - name: Verify registry updates
        env:
          REGISTRY_URL: ${{ secrets.REGISTRY_URL || 'https://registry.ezpz.dev' }}
        run: |
          echo "Verifying registry updates..."
          python -c "
          import json
          import requests
          import sys

          try:
              # Get current registry state
              response = requests.get('$REGISTRY_URL/plugins', timeout=30)
              if response.status_code != 200:
                  print(f'‚ùå Failed to fetch registry: {response.status_code}')
                  sys.exit(1)
              
              registry_plugins = response.json()
              
              # Load local plugins
              with open('discovered_plugins.json', 'r') as f:
                  local_plugins = json.load(f)
              
              print(f'Registry has {len(registry_plugins)} plugins')
              print(f'Local repository has {len(local_plugins)} plugins')
              
              # Check if all local plugins are in registry
              local_names = {p.get('name', 'unknown') for p in local_plugins}
              registry_names = {p.get('name', 'unknown') for p in registry_plugins}
              
              missing = local_names - registry_names
              if missing:
                  print(f'‚ö†Ô∏è Plugins not in registry: {missing}')
              else:
                  print('‚úÖ All local plugins are registered')
              
              # Check for outdated plugins
              outdated = []
              for local_plugin in local_plugins:
                  name = local_plugin.get('name')
                  if name:
                      registry_plugin = next((p for p in registry_plugins if p.get('name') == name), None)
                      if registry_plugin:
                          local_version = local_plugin.get('version', '0.0.0')
                          registry_version = registry_plugin.get('version', '0.0.0')
                          if local_version != registry_version:
                              outdated.append(f'{name}: {registry_version} -> {local_version}')
              
              if outdated:
                  print(f'üìã Version updates: {outdated}')
              else:
                  print('‚úÖ All versions are up to date')
                  
          except Exception as e:
              print(f'‚ùå Registry verification failed: {e}')
              sys.exit(1)
          "

      - name: Cleanup and notify
        run: |
          rm -f discovered_plugins.json
          echo "‚úÖ Registry update completed successfully"

          # Optional: Send notification (uncomment if you have notification setup)
          # echo "Sending completion notification..."
          # curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
          #   -H 'Content-type: application/json' \
          #   --data '{"text":"EZPZ Registry updated successfully with ${{ steps.discover.outputs.plugin_count }} plugins"}'

  registry-health-check:
    runs-on: ubuntu-latest
    needs: update-registry
    if: always()

    steps:
      - name: Final health check
        env:
          REGISTRY_URL: ${{ secrets.REGISTRY_URL || 'https://registry.ezpz.dev' }}
        run: |
          echo "Performing final registry health check..."
          python -c "
          import requests
          import sys
          import time

          max_retries = 3
          for i in range(max_retries):
              try:
                  response = requests.get('$REGISTRY_URL/health', timeout=10)
                  if response.status_code == 200:
                      print('‚úÖ Registry final health check passed')
                      break
                  else:
                      print(f'‚ùå Health check failed (attempt {i+1}): {response.status_code}')
              except Exception as e:
                  print(f'‚ùå Health check failed (attempt {i+1}): {e}')
              
              if i < max_retries - 1:
                  time.sleep(5)
              else:
                  print('‚ùå All health check attempts failed')
                  sys.exit(1)
          "

      - name: Test plugin discovery endpoint
        env:
          REGISTRY_URL: ${{ secrets.REGISTRY_URL || 'https://registry.ezpz.dev' }}
        run: |
          echo "Testing plugin discovery..."
          python -c "
          import requests
          import sys

          try:
              response = requests.get('$REGISTRY_URL/plugins', timeout=15)
              if response.status_code == 200:
                  plugins = response.json()
                  print(f'‚úÖ Plugin discovery working: {len(plugins)} plugins available')
                  
                  # Test a few key endpoints
                  if plugins:
                      first_plugin = plugins[0]
                      plugin_name = first_plugin.get('name')
                      if plugin_name:
                          detail_response = requests.get(f'$REGISTRY_URL/plugins/{plugin_name}', timeout=10)
                          if detail_response.status_code == 200:
                              print(f'‚úÖ Plugin detail endpoint working for {plugin_name}')
                          else:
                              print(f'‚ö†Ô∏è Plugin detail endpoint failed for {plugin_name}')
                  else:
                      print('‚ö†Ô∏è No plugins found in registry')
              else:
                  print(f'‚ùå Plugin discovery failed: {response.status_code}')
                  sys.exit(1)
          except Exception as e:
              print(f'‚ùå Plugin discovery test failed: {e}')
              sys.exit(1)
          "
