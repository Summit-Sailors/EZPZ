name: Publish EZPZ Packages

on:
  push:
    tags:
      - "v*"
  workflow_dispatch: # manual trigger
    inputs:
      package:
        description: 'Package to publish (or "all")'
        required: true
        default: "all"
        type: choice
        options:
          - all
          - pluginz
          - rust-ti
          - macroz
          - stubz

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      pluginz: ${{ steps.changes.outputs.pluginz }}
      rust-ti: ${{ steps.changes.outputs.rust-ti }}
      macroz: ${{ steps.changes.outputs.macroz }}
      stubz: ${{ steps.changes.outputs.stubz }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual trigger - publish based on input
            case "${{ github.event.inputs.package }}" in
              "all")
                echo "pluginz=true" >> $GITHUB_OUTPUT
                echo "rust-ti=true" >> $GITHUB_OUTPUT
                echo "macroz=true" >> $GITHUB_OUTPUT
                echo "stubz=true" >> $GITHUB_OUTPUT
                ;;
              "pluginz")
                echo "pluginz=true" >> $GITHUB_OUTPUT
                ;;
              "rust-ti")
                echo "rust-ti=true" >> $GITHUB_OUTPUT
                ;;
              "macroz")
                echo "macroz=true" >> $GITHUB_OUTPUT
                ;;
              "stubz")
                echo "stubz=true" >> $GITHUB_OUTPUT
                ;;
            esac
          else
            # Tag trigger - detect what changed since last tag
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [[ -z "$LAST_TAG" ]]; then
              # No previous tag, publish all
              echo "pluginz=true" >> $GITHUB_OUTPUT
              echo "rust-ti=true" >> $GITHUB_OUTPUT
              echo "macroz=true" >> $GITHUB_OUTPUT
              echo "stubz=true" >> $GITHUB_OUTPUT
            else
              # Check for changes in each package
              if git diff --name-only $LAST_TAG HEAD | grep -E '^core/pluginz/'; then
                echo "pluginz=true" >> $GITHUB_OUTPUT
              fi
              if git diff --name-only $LAST_TAG HEAD | grep -E '^plugins/ezpz-rust-ti/'; then
                echo "rust-ti=true" >> $GITHUB_OUTPUT
              fi
              if git diff --name-only $LAST_TAG HEAD | grep -E '^core/macroz/'; then
                echo "macroz=true" >> $GITHUB_OUTPUT
              fi
              if git diff --name-only $LAST_TAG HEAD | grep -E '^stubz/'; then
                echo "stubz=true" >> $GITHUB_OUTPUT
              fi
            fi
          fi

  publish-pluginz:
    needs: detect-changes
    if: needs.detect-changes.outputs.pluginz == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build pluginz package
        run: |
          cd core/pluginz
          python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          cd core/pluginz
          twine upload dist/*

      - name: Update plugin registry
        run: |
          # Call your registry API to update plugin info
          curl -X POST "${{ secrets.REGISTRY_URL }}/plugins/refresh" \
            -H "Authorization: Bearer ${{ secrets.REGISTRY_TOKEN }}"

  publish-rust-ti:
    needs: detect-changes
    if: needs.detect-changes.outputs.rust-ti == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install maturin
        run: pip install maturin[zig]

      - name: Build rust-ti plugin
        run: |
          cd plugins/ezpz-rust-ti
          maturin build --release --strip

      - name: Publish to PyPI
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          cd plugins/ezpz-rust-ti
          maturin publish --skip-existing

  publish-macroz:
    needs: detect-changes
    if: needs.detect-changes.outputs.macroz == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build macroz package
        run: |
          cd core/macroz
          python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          cd core/macroz
          twine upload dist/*

  publish-stubz:
    needs: detect-changes
    if: needs.detect-changes.outputs.stubz == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Publish stubz to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cd stubz
          cargo publish

  update-registry:
    needs: [publish-pluginz, publish-rust-ti, publish-macroz, publish-stubz]
    if: always() && (needs.publish-pluginz.result == 'success' || needs.publish-rust-ti.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Trigger registry update
        run: |
          curl -X POST "${{ secrets.REGISTRY_URL }}/plugins/refresh" \
            -H "Authorization: Bearer ${{ secrets.REGISTRY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"source": "github_release", "tag": "${{ github.ref_name }}"}'
