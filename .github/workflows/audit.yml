name: Security and Maintenance

on:
  schedule:
    # weekly on Mondays at 9 AM UTC
    - cron: "0 9 * * 1"
  push:
    branches: [main]
    paths:
      - "**/pyproject.toml"
      - "**/Cargo.toml"
      - "**/Cargo.lock"
      - "ezpz-lock.yaml"
      - "requirements*.lock"
  workflow_dispatch:
    inputs:
      check_type:
        description: "Type of check to run"
        required: true
        type: choice
        options:
          - all
          - security
          - dependencies
          - linting
        default: all

env:
  PYTHON_VERSION: "3.13"
  RUST_VERSION: "1.87"

jobs:
  security-audit:
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'security' || github.event.inputs.check_type == 'all' || github.event_name == 'schedule' || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Install Nushell
        uses: hustcer/setup-nu@v3
        with:
          version: "0.105.1"

      - name: Install Just
        uses: taiki-e/install-action@v2
        with:
          tool: just

      - name: Install Rye
        uses: eifinger/setup-rye@v4
        with:
          enable-cache: true
          cache-prefix: "rye-cache"

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          default: true
          override: true
          components: clippy

      - name: Install security tools
        run: just install-tools

      - name: Run security audit
        run: just ci-security

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            **/safety_report.json
            **/bandit_report.json
            **/rust_audit*.json
            semgrep_report.json
          retention-days: 30

  dependency-check:
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'dependencies' || github.event.inputs.check_type == 'all' || github.event_name == 'schedule'

    steps:
      - uses: actions/checkout@v4

      - name: Install Nushell
        uses: hustcer/setup-nu@v3
        with:
          version: "0.105.1"

      - name: Install Just
        uses: taiki-e/install-action@v2
        with:
          tool: just

      - name: Install Rye
        uses: eifinger/setup-rye@v4
        with:
          enable-cache: true
          cache-prefix: "rye-cache"

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          default: true
          override: true

      - name: Install dependency tools
        run: just install-tools

      - name: Run dependency checks
        run: just ci-deps

      - name: Generate dependency summary
        if: github.event_name == 'schedule'
        run: just dependency-summary

      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-reports
          path: |
            **/audit.json
            **/cargo_outdated*.json
            main_deps.json
            dependency_summary.md
          retention-days: 30

  code-quality:
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'linting' || github.event.inputs.check_type == 'all' || github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Install Nushell
        uses: hustcer/setup-nu@v3
        with:
          version: "0.105.1"

      - name: Install Just
        uses: taiki-e/install-action@v2
        with:
          tool: just

      - name: Install Rye
        uses: eifinger/setup-rye@v4
        with:
          enable-cache: true
          cache-prefix: "rye-cache"

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          default: true
          override: true
          components: rustfmt, clippy

      - name: Setup project
        run: just setup

      - name: Run code quality checks
        run: just ci-quality

      - name: Upload code quality reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-reports
          path: |
            ruff_report.json
            **/mypy_report.json
          retention-days: 30

  summary:
    runs-on: ubuntu-latest
    needs: [security-audit, dependency-check, code-quality]
    if: always()

    steps:
      - name: Report results
        run: |
          echo "# Security and Maintenance Workflow Summary" 
          echo ""
          echo "## Job Results:"
          echo "- Security Audit: ${{ needs.security-audit.result }}"
          echo "- Dependency Check: ${{ needs.dependency-check.result }}"
          echo "- Code Quality: ${{ needs.code-quality.result }}"
          echo ""
          echo "## Components Audited:"
          echo "- ✅ core/pluginz (Python)"
          echo "- ✅ core/macroz (Python)"
          echo "- ✅ core/registry (Python)"
          echo "- ✅ examples (Python)"
          echo "- ✅ plugins/ezpz-rust-ti (Rust + Python)"
          echo "- ✅ stubz (Rust)"
          echo "- ❌ api (excluded)"
          echo "- ❌ app (excluded)"
          echo "- ❌ formatterz (excluded - not in repository)"
          echo ""
          echo "## Artifacts Available:"
          echo "- security-reports: Security scan results"
          echo "- dependency-reports: Dependency analysis results"  
          echo "- code-quality-reports: Code quality check results"
          echo ""
          echo "Check individual job results and uploaded artifacts for detailed findings."
