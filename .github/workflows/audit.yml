name: Security and Quality

on:
  push:
    branches: [main]
    paths:
      - "**/pyproject.toml"
      - "**/Cargo.toml"
      - "**/Cargo.lock"
      - "ezpz-lock.yaml"
      - "requirements*.lock"
      - "**/*.py"
      - "**/*.rs"
  pull_request:
    branches: [main]
    paths:
      - "**/pyproject.toml"
      - "**/Cargo.toml"
      - "**/Cargo.lock"
      - "ezpz-lock.yaml"
      - "requirements*.lock"
      - "**/*.py"
      - "**/*.rs"
  schedule:
    # weekly on Mondays at 9 AM UTC
    - cron: "0 9 * * 1"

env:
  PYTHON_VERSION: "3.13"
  RUST_VERSION: "1.87"

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rye
        uses: eifinger/setup-rye@v4
        with:
          enable-cache: true

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          default: true
          components: clippy

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Install security tools
        run: |
          cargo install cargo-audit
          just workflow::install-tools

      - name: Run Rust security audit
        run: |
          cargo audit --json > rust_audit.json > rust_audit.json

      - name: Run Python security checks
        run: |
          find . -name "*.py" -path "*/src/*" -o -path "*/ezpz_*/*" -o -path "*/painlezz_*/*" | head -1 > /dev/null && \
          bandit -r . -f json -o bandit_report.json --skip B101 > bandit_report.json

          # pip-audit on requirements
          pip-audit --format=json --output=pip_audit_raw.json > pip_audit_raw.json

      - name: Convert to SARIF
        run: |
          just workflow::convert-sarif

      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: security-results.sarif

  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rye
        uses: eifinger/setup-rye@v4
        with:
          enable-cache: true

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          default: true
          components: rustfmt, clippy

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Setup Python project
        run: rye sync --all-features

      - name: Run Python quality checks
        run: |
          rye run ruff check . --output-format=github
          rye run ruff format --check .

      - name: Run Rust quality checks
        run: |
          cargo fmt --all -- --check

          cargo clippy --workspace --all-targets --all-features -- -D warnings -A clippy::too_many_arguments

  pr-summary:
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    if: github.event_name == 'pull_request' && always()
    permissions:
      pull-requests: write
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Generate PR summary
        id: generate_summary
        run: |
          echo "## üõ°Ô∏è Security & Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Add PR summary comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync(process.env.GITHUB_STEP_SUMMARY, 'utf8');

            // Check if a previous comment by the bot exists to update it
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.data.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('## üõ°Ô∏è Security & Quality Summary')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }
