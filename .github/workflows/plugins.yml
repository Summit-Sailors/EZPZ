name: EZPZ Plugin Management

on:
  push:
    branches: [main, develop]
    paths: ["plugins/**", "ezpz.toml"]
  pull_request:
    branches: [main]
    paths: ["plugins/**", "ezpz.toml"]
  workflow_dispatch:
    inputs:
      operation:
        description: "Operation to perform"
        required: true
        default: "test"
        type: choice
        options: ["test", "register-and-update", "publish", "full-pipeline"]
      dry_run:
        description: "Dry run (no actual registry changes)"
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.13"
  RUST_VERSION: "1.87"

jobs:
  discover-plugins:
    runs-on: ubuntu-latest
    outputs:
      project-plugins: ${{ steps.analyze-plugins.outputs.project-plugins }}
      plugins-to-register: ${{ steps.analyze-plugins.outputs.plugins-to-register }}
      plugins-to-update: ${{ steps.analyze-plugins.outputs.plugins-to-update }}
      has-changes: ${{ steps.analyze-plugins.outputs.has-changes }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: eifinger/setup-rye@v4
        with:
          enable-cache: true
      - uses: hustcer/setup-nu@v3
        with:
          version: "0.105.1"
      - uses: extractions/setup-just@v2
        with:
          just-version: "1.40.0"
      - run: rye sync
      - run: rye run ezplugins refresh
      - id: analyze-plugins
        run: just actions::analyze-plugins

  test-plugins:
    runs-on: ubuntu-latest
    needs: discover-plugins
    if: needs.discover-plugins.outputs.has-changes == 'true'
    permissions:
      security-events: write
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.discover-plugins.outputs.project-plugins) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: actions-rs/toolchain@v1
        if: hashFiles(format('{0}/Cargo.toml', matrix.plugin.path)) != ''
        with:
          toolchain: ${{ env.RUST_VERSION }}
          default: true
      - uses: eifinger/setup-rye@v4
        with:
          enable-cache: true
      - uses: hustcer/setup-nu@v3
        with:
          version: "0.105.1"
      - uses: extractions/setup-just@v2
        with:
          just-version: "1.40.0"
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/uv
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-${{ matrix.plugin.package_name }}-${{ hashFiles(format('{0}/**/pyproject.toml', matrix.plugin.path), format('{0}/**/Cargo.toml', matrix.plugin.path)) }}
      - run: rye sync
      - env:
          PLUGIN_PATH: ${{ matrix.plugin.path }}
          PACKAGE_NAME: ${{ matrix.plugin.package_name }}
        run: |
          just actions::validate-plugin
          just actions::build-rust
          just actions::run-tests
          just actions::convert-sarif
      - uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: ${{ matrix.plugin.path }}/security_results.sarif
        continue-on-error: true

  register-update-plugins:
    runs-on: ubuntu-latest
    needs: [discover-plugins, test-plugins]
    if: |
      always() && 
      needs.discover-plugins.outputs.has-changes == 'true' &&
      needs.test-plugins.result == 'success' &&
      (github.event.inputs.operation == 'register-and-update' || github.event.inputs.operation == 'full-pipeline')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: eifinger/setup-rye@v4
        with:
          enable-cache: true
      - uses: hustcer/setup-nu@v3
        with:
          version: "0.105.1"
      - uses: extractions/setup-just@v2
        with:
          just-version: "1.40.0"
      - run: rye sync
      - run: rye run ezplugins refresh
      - if: needs.discover-plugins.outputs.plugins-to-register != '[]'
        env:
          EZPZ_SERVER_SECRET: ${{ secrets.EZPZ_SERVER_SECRET }}
          PLUGINS_TO_REGISTER: ${{ needs.discover-plugins.outputs.plugins-to-register }}
          DRY_RUN: ${{ github.event.inputs.dry_run }}
        run: just actions::register-plugins
      - if: needs.discover-plugins.outputs.plugins-to-update != '[]'
        env:
          EZPZ_SERVER_SECRET: ${{ secrets.EZPZ_SERVER_SECRET }}
          PLUGINS_TO_UPDATE: ${{ needs.discover-plugins.outputs.plugins-to-update }}
          DRY_RUN: ${{ github.event.inputs.dry_run }}
        run: just actions::update-plugins

  publish-plugins:
    runs-on: ubuntu-latest
    needs: [discover-plugins, test-plugins, register-update-plugins]
    if: |
      always() && 
      needs.discover-plugins.outputs.has-changes == 'true' &&
      needs.test-plugins.result == 'success' &&
      (needs.register-update-plugins.result == 'success' || needs.register-update-plugins.result == 'skipped') &&
      (github.event.inputs.operation == 'publish' || github.event.inputs.operation == 'full-pipeline')
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.discover-plugins.outputs.project-plugins) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: actions-rs/toolchain@v1
        if: hashFiles(format('{0}/Cargo.toml', matrix.plugin.path)) != ''
        with:
          toolchain: ${{ env.RUST_VERSION }}
          default: true
      - uses: eifinger/setup-rye@v4
        with:
          enable-cache: true
      - uses: hustcer/setup-nu@v3
        with:
          version: "0.105.1"
      - uses: extractions/setup-just@v2
        with:
          just-version: "1.40.0"
      - run: |
          rye sync
          rye add twine
      - id: check-publish
        env:
          PACKAGE_NAME: ${{ matrix.plugin.package_name }}
          PLUGINS_TO_REGISTER: ${{ needs.discover-plugins.outputs.plugins-to-register }}
          PLUGINS_TO_UPDATE: ${{ needs.discover-plugins.outputs.plugins-to-update }}
        run: just actions::check-publish
      - if: steps.check-publish.outputs.needs-publishing == 'true'
        env:
          PLUGIN_PATH: ${{ matrix.plugin.path }}
          PACKAGE_NAME: ${{ matrix.plugin.package_name }}
        run: |
          just actions::build-plugin
          just actions::validate-package
      - if: steps.check-publish.outputs.needs-publishing == 'true' && github.event.inputs.dry_run != 'true'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
          PLUGIN_PATH: ${{ matrix.plugin.path }}
          PACKAGE_NAME: ${{ matrix.plugin.package_name }}
        run: just actions::publish-pypi
      - if: steps.check-publish.outputs.needs-publishing == 'true' && hashFiles(format('{0}/Cargo.toml', matrix.plugin.path)) != '' && github.event.inputs.dry_run != 'true'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          PLUGIN_PATH: ${{ matrix.plugin.path }}
          PACKAGE_NAME: ${{ matrix.plugin.package_name }}
        run: just actions::publish-cargo

  generate-report:
    runs-on: ubuntu-latest
    needs:
      [discover-plugins, test-plugins, register-update-plugins, publish-plugins]
    if: always()
    steps:
      - uses: actions/checkout@v4
      - uses: hustcer/setup-nu@v3
        with:
          version: "0.105.1"
      - uses: extractions/setup-just@v2
        with:
          just-version: "1.40.0"
      - env:
          OPERATION: ${{ github.event.inputs.operation }}
          DRY_RUN: ${{ github.event.inputs.dry_run }}
          EVENT_NAME: ${{ github.event_name }}
          DISCOVER_RESULT: ${{ needs.discover-plugins.result }}
          TEST_RESULT: ${{ needs.test-plugins.result }}
          REGISTER_RESULT: ${{ needs.register-update-plugins.result }}
          PUBLISH_RESULT: ${{ needs.publish-plugins.result }}
          HAS_CHANGES: ${{ needs.discover-plugins.outputs.has-changes }}
          PLUGINS_TO_REGISTER: ${{ needs.discover-plugins.outputs.plugins-to-register }}
          PLUGINS_TO_UPDATE: ${{ needs.discover-plugins.outputs.plugins-to-update }}
        run: just actions::generate-report
