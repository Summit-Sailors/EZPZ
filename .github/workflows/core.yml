name: Core Components CI/CD

on:
  push:
    branches: [main, dev]
    paths:
      - "core/pluginz/**"
      - "core/macroz/**"
      - "core/registry/**"
      - "pyproject.toml"
      - "requirements*.lock"
      - ".github/workflows/core.yml"
  pull_request:
    branches: [main]
    paths:
      - "core/pluginz/**"
      - "core/macroz/**"
      - "core/registry/**"
      - "pyproject.toml"
      - "requirements*.lock"
      - ".github/workflows/core.yml"
  workflow_dispatch:
    inputs:
      deploy_env:
        description: "Deployment environment"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      publish_pypi:
        description: "Publish to PyPI"
        required: true
        default: false
        type: boolean
      run_build:
        description: "Run Build Packages job"
        required: false
        default: false
        type: boolean
      run_publish:
        description: "Run Publish to PyPI job"
        required: false
        default: false
        type: boolean
      run_deploy:
        description: "Run Deploy Registry job"
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.13"

jobs:
  test-core:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' ||
      github.event_name == 'pull_request' ||
      github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Install Rye
        uses: eifinger/setup-rye@v4
        with:
          version: "latest"

      - name: Pin Python version
        run: rye pin ${{ env.PYTHON_VERSION }}

      - name: Cache Rye dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-rye-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements*.lock', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-rye-${{ env.PYTHON_VERSION }}-

      - name: Install workspace dependencies
        run: |
          rye sync

      - name: Run linting and formatting checks
        run: |
          rye run ruff check .
          rye run ruff format --check .

      - name: Test pluginz
        run: |
          cd core/pluginz
          rye test

      - name: Test macroz
        run: |
          cd core/macroz
          rye test

      - name: Test registry
        run: |
          cd core/registry
          rye test

      - name: Test CLI functionality
        run: |
          cd core/pluginz
          echo "--- Testing 'ezplugins help' command ---"
          rye run ezplugins help

          echo "--- Testing 'ezplugins help <command>' ---"
          rye run ezplugins help list
          rye run ezplugins help add
          rye run ezplugins help find

          echo "--- Testing 'ezplugins list' command ---"
          rye run ezplugins list

          echo "--- Testing 'ezplugins status' command ---"
          rye run ezplugins status

          echo "--- Testing 'ezplugins mount'  ---"
          rye run ezplugins mount || true

          echo "--- Testing 'ezplugins unmount' ---"
          rye run ezplugins unmount || true

          rye run ezplugins find database --field category
          rye run ezplugins find "my-test-plugin" --exact
          rye run ezplugins find rust

  build-packages:
    needs: test-core
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && github.event.inputs.run_build == true
    outputs:
      pluginz-version: ${{ steps.build-info.outputs.pluginz-version }}
      macroz-version: ${{ steps.build-info.outputs.macroz-version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rye
        uses: eifinger/setup-rye@v4
        with:
          version: "latest"

      - name: Pin Python version
        run: rye pin ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: rye sync --no-dev

      - name: Build pluginz package
        run: |
          cd core/pluginz
          rye build
          echo "Built pluginz package"

      - name: Build macroz package
        run: |
          cd core/macroz
          rye build
          echo "Built macroz package"

      - name: Extract version information
        id: build-info
        run: |
          PLUGINZ_VERSION=$(cd core/pluginz && rye run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          MACROZ_VERSION=$(cd core/macroz && rye run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "pluginz-version=$PLUGINZ_VERSION" >> $GITHUB_OUTPUT
          echo "macroz-version=$MACROZ_VERSION" >> $GITHUB_OUTPUT

      - name: Check package integrity
        run: |
          rye add twine
          rye run twine check core/pluginz/dist/*
          rye run twine check core/macroz/dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-packages
          path: |
            core/pluginz/dist/*
            core/macroz/dist/*
          retention-days: 30

  publish-pypi:
    needs: build-packages
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && github.event.inputs.run_publish == true

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/

      - name: Install Rye
        uses: eifinger/setup-rye@v4
        with:
          version: "latest"

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          rye add twine
          rye run twine upload dist/core/pluginz/dist/*
          rye run twine upload dist/core/macroz/dist/*
          echo "Successfully published packages to PyPI"

  deploy-registry:
    needs: test-core
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && github.event.inputs.run_deploy == true
    environment:
      name: ${{ github.event.inputs.deploy_env || 'staging' }}
      url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rye
        uses: eifinger/setup-rye@v4
        with:
          version: "latest"

      - name: Pin Python version
        run: rye pin ${{ env.PYTHON_VERSION }}

      - name: Prepare registry for deployment
        run: |
          cd core/registry
          rye sync --no-dev

      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./core/registry
          vercel-args: "--prod"

      - name: Update deployment status
        run: |
          echo "Registry deployed successfully"
          echo "Environment: ${{ github.event.inputs.deploy_env || 'staging' }}"
          echo "URL: ${{ steps.deploy.outputs.preview-url }}, NAME: ${{steps.deploy.outputs.preview-name}}"

  notify-completion:
    needs: [test-core, build-packages, publish-pypi, deploy-registry]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Workflow completion summary
        run: |
          echo "## Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test-core.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build-packages.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| PyPI Publish | ${{ needs.publish-pypi.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Registry Deploy | ${{ needs.deploy-registry.result }} |" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-packages.result }}" == "success" ]; then
            echo "### Built Versions" >> $GITHUB_STEP_SUMMARY
            echo "- **pluginz**: ${{ needs.build-packages.outputs.pluginz-version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **macroz**: ${{ needs.build-packages.outputs.macroz-version }}" >> $GITHUB_STEP_SUMMARY
          fi
